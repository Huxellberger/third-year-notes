\section*{Overview}

Any program written in any programming language must be translated before it can be executed on a certain piece of hardware. This translation is typically accomplished by a software system called compiler. This module aims to introduce students to the principles and techniques used to perform this translation and the key issues that arise in the construction of modern compilers.

\section*{Syllabus}
\begin{mymulticols}
\begin{description}
\item{\textbf{Introduction}}
What is a compiler? A high-level view of compilation. General structure of a 
compiler. An overview of compilation technology.

\item{\textbf{Lexical Analysis (Scanning)}}
Regular languages/expressions, finite state machines, building regular
expressions from a finite automaton.

\item{\textbf{Syntax Analysis (Parsing)}}
Expressing Syntax, Context Free Grammars, Top-Down Parsing, Bottom-Up parsing.

\item{\textbf{Semantic Analysis}}
Context-sensitive analysis, Attribute Grammars, Symbol Tables, Type Checking.

\item{\textbf{Intermediate Representations}}
Properties, taxonomy, Graphical IRs, Linear IRs.

\item{\textbf{Storage Management}}
The Procedure Abstraction, Linkage convention, Run-time storage organisation.

\item{\textbf{Code Generation}}
Code Shape, Instruction Selection, Register Allocation, Instruction Scheduling.

\item{\textbf{Topics in Compiler Construction}}
Code Optimisation, JIT Compilation.
\end{description}
\end{mymulticols}

\section*{Attribution}

These notes are based off of both the course notes
(\url{http://studentnet.cs.manchester.ac.uk/ugt/COMP36512/}). Thanks to Rizos Sakellariou for such a good course! If you find any errors, then I'd love to hear about them!

\section*{Contribution}

Pull requests are very welcome:
\url{https://github.com/Todd-Davies/third-year-notes}